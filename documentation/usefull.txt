IP server 1 (vps295100): 51.255.46.214
IP server 2 (vps494554): 51.254.221.25


---------------------------------------------------------------
                           INSTALL 
---------------------------------------------------------------

Base: MERN-STARTER

-------------  Additional modules ---------------

// For upgrading npm packages:
install npm-check-update, then run:
ncu -u

// List npm packages (global & project)
npm list -g --depth=0
npm list --depth=0



// npm & proxy

!!! Use the proxy-on.cmd & proxy-off.cmd made to switch git & npm !!!

AWL conf:
  npm config set proxy http://proxy-internet.localnet:3128/
  npm config set https-proxy http://proxy-internet.localnet:3128/
No proxy:
  npm config rm proxy
  npm config rm https-proxy




// For managing multiple config files (per env) (default file: config/default.json) :
npm install config --save

// For nodejs logging:
npm install winston --save

// For HTTP node.js logging:
npm install morgan --save
npm install file-stream-rotator --save

// For Google maps:
npm install google-maps-react --save

// For UI compornents:
npm install react-tap-event-plugin --save



// For testing
npm install mocha --save-dev
npm install chai --save-dev
npm install chai-http --save-dev

// Note about Mocha error on css & images, use an ignore compiler:
In package.json    
    "test": "cross-env NODE_ENV=test ./node_modules/.bin/mocha --compilers js:babel-core/register,css:test/mocha_ignore.js,png:test/mocha_ignore.js -d test/**/*.js"
In Test folder: add a mocha_ignore.js file:
  function donothing() { return null; }
  require.extensions['.png'] = donothing;
  require.extensions['.css'] = donothing;




--------------  For windows  -----------------

node_gyp install after:
npm install --global --production windows-build-tools

ImageMagik:
https://www.imagemagick.org/download/binaries/ImageMagick-7.0.4-7-Q16-x64-dll.exe








---------------------------------------------------------------
                             MONGO
---------------------------------------------------------------



-------------  A - Create users & db ---------------

# ------ 1 - Create users (in console) ------ 

mongo
use admin
db.createUser({ user:"admin", pwd:"maniacPwd", roles:[{role:"root", db:"admin"}]})
exit

# ------ 2 - Secure login ------ 

add: --auth in /lib/systemd/system/mongod.service: ExecStart=/usr/bin/mongod --auth --config /etc/mongod.conf
systemctl daemon-reload
sudo service mongod restart
mongo -u admin -p maniacPwd --authenticationDatabase admin
use admin
db.getUsers()
use food_maniac_dev
db.createUser({ user:"food", pwd:"maniac", roles:["readWrite"] })
db.createUser({ user:"adminFood", pwd:"maniacRoot", roles: ["dbAdmin"]})
use food_maniac
db.createUser({ user:"food", pwd:"maniac", roles:["readWrite"] })
db.createUser({ user:"adminFood", pwd:"maniacRoot", roles: ["dbAdmin"]})

# ------ 3 - Connexion (not valid once SSL setup!) ------ 

# From localhost:
mongo -u food -p maniac --authenticationDatabase food_maniac
# Remote connexion:
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac

# Alternate method to id:
use food_maniac
db.auth("food", "maniac")




-------------  Secure mongo ---------------

# ------ 1 - Firewall configuration ------ 

# Note: use iptables-persistent to easily save rules:
sudo apt-get install iptables-persistent

sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -d 127.0.0.0/8 -j REJECT
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A OUTPUT -j ACCEPT
#  Allow HTTP and HTTPS connections from anywhere
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
# Open to all IP (not very safe!):
sudo iptables -A INPUT -p tcp --dport 27017 -m state --state NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -p tcp --sport 27017 -m state --state ESTABLISHED -j ACCEPT
# Secure way:
sudo iptables -A INPUT -s 51.255.46.214 -p tcp --destination-port 27017 -m state --state NEW,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -d 51.255.46.214 -p tcp --source-port 27017 -m state --state ESTABLISHED -j ACCEPT
#  Allow SSH connections
sudo iptables -A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT
#  Allow ping
sudo iptables -A INPUT -p icmp -j ACCEPT
#  Log iptables denied calls
sudo iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7
# Drop incoming connections if IP make more than 15 connection attempts to port 80 within 60 seconds
sudo iptables -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set
sudo iptables -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 60  --hitcount 15 -j DROP
#  Drop all other inbound - default deny unless explicitly allowed policy
sudo iptables -A INPUT -j DROP
sudo iptables -A FORWARD -j DROP

# Check & persist:
sudo iptables -L
sudo netfilter-persistent save


# ------ 2 - Mongo configuration ------ 

# Allow external connections: add these lines to /etc/mongod.conf
# Best: accept connections only from food maniac server bind_ip = 51.255.46.214
bind_ip = 0.0.0.0
port = 27017


# ------ 3 - Setup TLS/SSL ------ 

# Generate new certificate (.crt) & Private key (.key)
openssl req -newkey rsa:2048 -new -x509 -days 3650 -nodes -out mongodb-cert.crt -keyout mongodb-cert.key
# Generate a .pem from certificate & private key
cat mongodb-cert.key mongodb-cert.crt > mongodb.pem
sudo cp mongodb.pem /etc/ssl

# Insert in /etc/mongod.conf, after the bind_ip:
  ssl:
    mode: requireSSL
    PEMKeyFile: /etc/ssl/mongodb.pem
    #CAFile: /etc/ssl/mongodb-cert.crt
# Note: to connect with AND without SSL, one can use:
    mode: allowSSL
    
# Restart mongo:
sudo service mongod restart
mongo --ssl --sslAllowInvalidHostnames --sslAllowInvalidCertificates
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslAllowInvalidHostnames --sslAllowInvalidCertificates
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames

# Mongoose options to accept TLS/SSL:
   mongoOpt = {
      "server": { 
        "sslValidate": false,
        "sslKey": fs.readFileSync('/etc/ssl/mongodb.pem'),
        "sslCert": fs.readFileSync('/etc/ssl/mongodb-cert.crt')
      }
    }
# Transfer mongo certificates to app server:
# From db server (folder /etc/ssl):
sftp lve@51.254.221.25:/etc/ssl/mongo* ~/
# Move them to the /etc/ssl or local ssl folder (~/ssl)


# ------ 4 - Connexion once SSL is setup ------ 

# Remote connection as a 'regular user' (/etc/ssl folder):
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
# Remote connection as a 'regular user' (~/ssl folder):
mongo 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslPEMKeyFile ~/ssl/mongodb.pem --sslCAFile ~/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
# Remote connection as a 'regular user' from Windows:
"C:\Program Files\MongoDB\Server\3.6\bin\mongo" 51.254.221.25:27017/food_maniac -u food -p maniac --authenticationDatabase food_maniac --ssl --sslPEMKeyFile C:\etc\ssl\mongodb.pem --sslCAFile C:\etc\ssl\mongodb-cert.crt --sslAllowInvalidHostnames

# Remote connection as an admin (/etc/ssl folder):
mongo 51.254.221.25:27017/admin -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
# Remote connection as an admin (~/ssl folder):
mongo 51.254.221.25:27017/admin -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile ~/ssl/mongodb.pem --sslCAFile ~/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
# Remote connection as a 'regular user' from Windows:
"C:\Program Files\MongoDB\Server\3.6\bin\mongo" 51.254.221.25:27017/admin -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile C:\etc\ssl\mongodb.pem --sslCAFile C:\etc\ssl\mongodb-cert.crt --sslAllowInvalidHostnames


# ------ 5 - Connection behind a proxy ------ 

Use proxyfier or similar:
https://stackoverflow.com/questions/33483140/connect-to-mongodb-database-using-mongoose-behind-a-proxy


# ------ 6 - Backup / Restore once SSL is setup ------ 

# (!) the BACKUP.SH script (in db folder) deals with backup & sends result from db server to app server
# It should be put in crontab for auto run (see instructions in script)

# Locally or from a Unix machine:
mongodump  -h 51.254.221.25:27017 --db food_maniac -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/mongodb-cert.crt --sslAllowInvalidHostnames
tar cvzf food_maniac_prod_db.tar.gz dump/

# Remotelly from a Windows machine:
"C:\Program Files\MongoDB\Server\3.6\bin\mongodump"   -h 51.254.221.25:27017 --db food_maniac -u admin -p maniacPwd --authenticationDatabase admin --ssl --sslPEMKeyFile C:\etc\ssl\mongodb.pem --sslCAFile C:\etc\ssl\mongodb-cert.crt --sslAllowInvalidHostnames

# Install keychain on db server to use sftp w/out password to send backup to other machine
# see https://www.cyberciti.biz/faq/ssh-passwordless-login-with-keychain-for-scripts/
# or better: https://discussions.apple.com/thread/6859137
sudo apt-get install keychain
ssh-keygen -t rsa
(NO passphrase so it runs in crontab)
add this to user .profile (or .bash_profile if it exists):
### START-Keychain ###
# Let  re-use ssh-agent and/or gpg-agent between logins
/usr/bin/keychain $HOME/.ssh/id_rsa_nophrase
source $HOME/.keychain/$HOSTNAME-sh
### End-Keychain ###

# Add the generated public key to all the systems you want to use w/out pwd.
echo put /home/lve/.ssh/id_rsa_nophrase.pub | sftp -b- lve@51.255.46.214

# it should be added to the .ssh/authorized_keys
cat id_rsa_nophrase.pub >>$HOME/.ssh/authorized_keys


-------------  Start DB ---------------

// In new console, type:

	\mongodb\bin\mongod

-------------  Windows Console ---------------

"C:\Program Files\MongoDB\Server\3.6\bin\mongo"

-------------  List dbs & use ---------------
show dbs
use food_maniac_dev
db.markindividuals.find({_id:ObjectId("591d8dd6d3cc262690469486")})

------ Rename db: ------ 
db.copyDatabase("food_maniac_dev","food_maniac_dev_save","localhost")
use food_maniac_dev
db.dropDatabase();
use food_maniac_dev_save

------ Create db: ------ 
--> use creates if it does not exist!
use xxxx

------ Reset dev db: ------ 
c:\mongodb\bin\mongo
use food_maniac_dev;
db.dropDatabase();
use food_maniac_dev;
exit;

------ Reset prod db: ------ 
mongo
use food_maniac;
db.dropDatabase();
use food_maniac;
exit;

-------------  List collections & content ---------------
show collections
db.items.find()

-------------  Change field name ---------------
db.items.update({}, {$rename: {'cuid': 'id'}}, { upsert:false, multi:true } )

-------------  Change field value  ---------------
// Change geo key coordinates:
db.markaggregates.update({'_id': ObjectId('58f4dfff45dab98a840d0004')}, {$set: {'location': {'type' : 'Point', 'coordinates': [3.0177912000000333, 50.5750322]} } } )

// Change place name & coordinates:
db.places.update({'_id': ObjectId('5908800450a7934d128ff770')}, {$set: {'name': 'Brasserie RN Louvain-La-Neuve', 'location': {'type' : 'Point', 'coordinates': [4.625232, 50.6682973]} } } )

-------------  Find by geo location  ---------------

db.markaggregates.find(
   {
     location:
       { $near :
          {
            $geometry: { type: "Point",  coordinates: [ 3.0177912000000333, 50.5750322 ] },
            $maxDistance: 50000
          }
       }
   }
)

-------------  Remove field ---------------
db.items.update({},{$unset: {cuid:1}}, {multi: true})
db.users.update({},{$unset: {cuid:1}}, {multi: true})
db.marks.update({},{$unset: {cuid:1}}, {multi: true})
db.places.update({},{$unset: {cuid:1}}, {multi: true})


-------------  Transfer collection (backup / dump - restore) ---------------

// ------ Backup PROD --------
// Creates a /dump folder.
// (to restrict to one collection, use this: --collection places)
mongodump  --db food_maniac
// Tar the folder for easy transfer
tar cvzf food_maniac_prod_db.tar.gz dump/
// Move archive to place available for Web download
mv food_maniac_prod_db.tar.gz distFoServer/

// ------ Restore in DEV db--------
// 1st: save DEV db
c:\mongodb\bin\mongo
db.copyDatabase("food_maniac_dev","food_maniac_dev_save","localhost")
use food_maniac_dev
db.dropDatabase();
exit
// Then download the archive by browsing this url & use 7zip...
https://food-maniac.com/food_maniac_prod_db.tar.gz
// Unix: wget https://food-maniac.com/food_maniac_prod_db.tar.gz
// Unix: tar xvf food_maniac_prod_db.tar.gz dump/
// Unix: mongorestore -u 'food' -p 'maniac' --authenticationDatabase "food_maniac" dump/
// Then restores from a /dump folder.
// (to restrict to one collection, use this: --collection places)
// (/dump folder must contain the json files dump with mongodump)
c:\mongodb\bin\mongorestore dump/
// At last, copy db PROD in DEV:
c:\mongodb\bin\mongo
db.copyDatabase("food_maniac","food_maniac_dev","localhost")
exit


// ------ Duplicate db on the same server (or remote server NOT SSL) --------

# From same mongo instance:
db.copyDatabase('food_maniac', 'food_maniac_dev')

# From remote instance (does NOT work as we use secure db with SSL):
# Only backup & restore work then
db.copyDatabase('food_maniac', 'food_maniac_dev')
db.copyDatabase('food_maniac', 'food_maniac_dev', "51.254.221.25", "adminFood", "maniacRoot", "SCRAM-SHA-1")




---------------------------------------------------------------
                             BASICS
---------------------------------------------------------------



---------------- Debug ----------------

- install node-inspector: npm install -g node-inspector
- launch it: node-inspector
- run the app: node --debug server.js
(to rebuild client if necessary: npm run build )









---------------------------------------------------------------
                          SUBLIME
---------------------------------------------------------------

Find in files:
C:\workspace\mapTest\, -*/node_modules/*, -*/distBoServer/*, -*/distFoServer/*, -*/server/log*







---------------------------------------------------------------
                            GIT
---------------------------------------------------------------


---------- Git issue with proxy ---------- 

!!! Use the proxy-on.cmd & proxy-off.cmd made to switch git & npm !!!

- Edit C:\Utilisateurs\a545888\.gitconfig
- For Github : 
    [http]
      proxy = proxy:3128
- For gitlab: remove http proxy! 
    [http]

or try: 
- set: "git config --global http.proxy proxy:3128" and "git.exe config http.proxy proxy:3128"
- remove: "git config --global --unset http.proxy" and "git.exe config --unset http.proxy"
- list: "git config --global --get http.proxy" and "git.exe config --get http.proxy"

---------- Avoid enteing user password at every push ------
- configure git gui with user & password
- type: git config --global credential.helper wincred



---------------------------------------------------------------
                            Tricks
---------------------------------------------------------------

// Hot react reloading with nodejs
	- Use nodemon
	- use webpack-dev-middleware and webpack-hot-middleware









---------------------------------------------------------------
                            Documentation
---------------------------------------------------------------

// Mind Map:

	https://www.mindmeister.com/781979041

// Screens designs:

	https://sketchboard.me/XAaTovM1fJjS#/









---------------------------------------------------------------
                            NPM
---------------------------------------------------------------


# Find what needs to be updated:
npm outdated
# Globally:
npm outdated -g

# Update all (& update the package.json file)
npm update

# Reinstall node_modules & npm cache:
npm cache clean --force
rm -fr node_modules\
npm install



---------------------------------------------------------------
                            ubuntu
---------------------------------------------------------------

Version: 16.04
Note: get version with: lsb_release -a

Update:
sudo apt-get update
sudo apt-get upgrade
sudo apt autoremove
sudo apt-get dist-upgrade

Update Ubuntu:
sudo do-release-upgrade

sudo reboot
sudo shutdown -r now

------ Nodejs update -------
With 'n':
sudo npm install -g n
sudo n latest
or sudo n current



---------------------------------------------------------------
                SSL with letsencrypt certbot
---------------------------------------------------------------

Did not do this:
  sudo apt install letsencrypt

Instead:

- Renew Letsencrypt certificate:
    - Ssh on the server
    - pm2 stop all
    - sudo systemctl stop nginx
    - /opt/letsencrypt/letsencrypt-auto renew
    - pm2 start all
    result (ceritificate) is there: /etc/letsencrypt/live/food-maniac.com/fullchain.pem 

- Creation process:
    - sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
    - cd /opt/letsencrypt
    - sudo systemctl stop nginx
    - ./letsencrypt-auto certonly –standalone
    - sudo nano /etc/nginx/sites-enabled/default
    - sudo systemctl start nginx


- Use of certbot:
    - sudo add-apt-repository ppa:certbot/certbot
    - sudo apt-get update
    - sudo apt-get install python-certbot-nginx
    - list of existing certificates and expiration dates: sudo certbot certificates

    


---------------------------------------------------------------
                            nginx
---------------------------------------------------------------


cd /etc/nginx/
more nginx.conf

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

IMPORTANT NOTE ON ADDING PATHES TO THE SERVER: look comment in boServer.js


---------------------- Logs & debug ---------------

LOG file here: /var/log/nginx
sudo less /var/log/nginx/error.log


Test BoServer (NOT nginx) accessible locally, from server machine: curl localhost:8085/api



------------------  To restart nginx  ------------

/etc/init.d/nginx restart


------------------ File: sudo nano /etc/nginx/sites-available/default ------------------

# HTTP - redirect all requests to HTTPS:
server {
        listen 80;
        listen [::]:80 default_server ipv6only=on;
        return 301 https://$host$request_uri;
}

# HTTPS - proxy requests on to local Node.js app:
server {
        listen 443;
        server_name food-maniac.com;

        ssl on;
        # Use certificate and key provided by Let's Encrypt:
        ssl_certificate /etc/letsencrypt/live/food-maniac.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/food-maniac.com/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';


        # Pass requests for /api to localhost:8085:
        location /api/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/api/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /util to localhost:8085:
        location /util/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/util/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for /socket.io to localhost:8085:
        location /socket.io/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/socket.io/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /static to localhost:8085:
        location /static/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/static/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
        
        # Pass requests for /logs to localhost:8085:
        location /logs/ {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8085/logs/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

        # Pass requests for / to localhost:8080:
        location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://localhost:8080/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }
}




---------------------------------------------------------------
          UNIX useful commands
---------------------------------------------------------------

List files by size (S: size, r:reverse):
ls -lSr

List files over a certain size:
find . -size +100M

List & delete files over a certain size:
find . -size +100M -delete

Disk usage (include folder sizes and grand total. -s: summary for each file, -h: human readable, -c: total)
du -s -h -c *




















---------------------------------------------------------------
                       DOCKER
---------------------------------------------------------------


----------  Init docker server  ---------- 
# Change root password & create new user with sudo access:
passwd
adduser lve
sudo usermod -aG sudo lve

# Install Docker (on Ubuntu):
https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce-1

# Docker without sudo (https://docs.docker.com/engine/installation/linux/linux-postinstall/):
sudo groupadd docker
sudo usermod -aG docker lve

# Configure Docker to start on boot
sudo systemctl enable docker

------------------  1st tests  -----------------------

docker-machine create -d virtualbox --engine-env HTTP_PROXY=http://proxy-internet.localnet:3128 --engine-env HTTPS_PROXY=http://proxy-internet.localnet:3128  proxy-machine



------------------  nginx  -----------------------

create a folder docker-nginx

Dockerfile for nginx:
FROM nginx
# COPY static-html-directory /usr/share/nginx/html

Build:
sudo docker build -t test-nginx .

Run:
sudo docker run --name container-test-nginx -d -p 8123:80 test-nginx


/etc/nginx/sites-available/default


------------------  mongo  -----------------------

(!)(!)(!)(!)(!)(!)(!)(!)
1 - On Ubuntu, do NOT install the mongodb-clients, instead, use mongodb-org-shell
        sudo apt-get install mongodb-org-shell
2 - IMPORTANT !!! mongo and mongod should have the SAME VERSION!!!

-------- Data / Volumes --------

# Create volume for data (prod / test / dev)
docker volume create --name food
docker volume create --name food-test
docker volume create --name food-dev

# List volumes:
docker volume ls

# Inspect volume (to find where it's stored on host machine)
# current: /var/lib/docker/volumes/food/_data
docker volume inspect food

# Backup prod data:
docker stop mongo-foodmaniac
docker run \
        --rm \
        --mount type=volume,source=food,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        busybox tar zcvf /tmphost/backupDb.tar.gz /data/db
docker start mongo-foodmaniac
ls -al /tmp

# Restore backup data in dev volume:
docker stop mongo-foodmaniac-dev
docker run \
        --rm \
        --mount type=volume,source=food-dev,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        busybox tar xvf /tmphost/backupDb.tar.gz -C /data/db
docker start mongo-foodmaniac-dev



-------- Image initialization --------

----- PROD ------

# Start container (w/ volume food) without authentication
docker run \
        --name mongo-foodmaniac-unsecure \
        --mount type=volume,source=food,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        -d \
        -p 27117:27017 \
        mongo:3.4
# old: docker run --name mongo-foodmaniac-unsecure --mount type=volume,source=food,target=/data/db --mount type=bind,source=/tmp,target=/tmphost -d mongo:3.4
# Create users (in console)
docker exec -it mongo-foodmaniac-unsecure mongo admin
use admin
db.createUser({ user:"admin", pwd:"maniacPwd", roles:[{role:"root", db:"admin"}]})
exit
mongo -u admin -p maniacPwd --authenticationDatabase admin

use food_maniac
db.createUser({ user:"food", pwd:"maniac", roles:["readWrite"] })
db.createUser({ user:"adminFood", pwd:"maniacRoot", roles: ["dbAdmin"]})
exit
# Kill non-secure container & remove it:
docker rm -f mongo-foodmaniac-unsecure
# Finally, start container (w/ volume food) with authentication and with automatic restart
docker run \
        --name mongo-foodmaniac \
        --restart unless-stopped \
        --mount type=volume,source=food,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        -d \
        -p 27017:27017 \
        mongo:3.4 \
        --auth

# Test with 8080 port:
docker run \
        --name mongo-foodmaniac \
        --restart unless-stopped \
        --mount type=volume,source=food,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        -d \
        -p 8080:27017 \
        mongo:3.4 \
        --auth


# Open port in firewall (require root access):
iptables -A INPUT -p tcp --dport 27017 -j ACCEPT
iptables -A INPUT -p tcp --dport 27117 -j ACCEPT
iptables-save > /etc/iptables.conf

----- DEV ------

# Start container (w/ volume food) without authentication
docker run --name mongo-foodmaniac-dev-unsecure --mount type=volume,source=food-dev,target=/data/db --mount type=bind,source=/tmp,target=/tmphost -d mongo:3.4
# Create users (in console)
docker exec -it mongo-foodmaniac-dev-unsecure mongo admin
use admin
db.createUser({ user:"adminFood", pwd:"maniacRoot", roles: ["dbAdminAnyDatabase","clusterAdmin"]})
use food_maniac
db.createUser({ user:"food", pwd:"maniac", roles:["readWrite"] })
db.createUser({ user:"adminFood", pwd:"maniacRoot", roles: ["dbAdmin"]})
exit
# Kill non-secure container & remove it:
docker rm -f mongo-foodmaniac-dev-unsecure
# Finally, start container (w/ volume food) with authentication and with automatic restart
docker run \
        --name mongo-foodmaniac-dev \
        --restart unless-stopped \
        --mount type=volume,source=food-dev,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        -d \
        -p 27018:27017 \
        mongo:3.4 \
        --auth
# Open port in firewall (require root access):
iptables -A INPUT -p tcp --dport 27018 -j ACCEPT
iptables-save > /etc/iptables.conf

-------- Misc --------

# Show logs:
docker logs mongo-foodmaniac
#test:
# use test
# db.categories.insert({ "name":"test201201" })
# db.categories.find()

# Show console:
docker exec -it mongo-foodmaniac mongo -u food -p maniac food_maniac

# Shell in container
docker exec -it mongo-foodmaniac bash

# Check from other machine
nmap 51.254.221.25

# Remote access:
c:\mongodb\bin\mongo 51.254.221.25:27017/food_maniac -u "food" -p "maniac" --authenticationDatabase "food_maniac"
c:\mongodb\bin\mongo 51.254.221.25:27017/food_maniac -u "foodOwner" -p "maniacRoot" --authenticationDatabase "admin"
# or just mongo then use... then:
db.auth("foodOwner", "maniacRoot")
db.auth("foodRoot", "maniacRoot")
db.auth("food", "maniac")



# If needed, restart after shutdown (normally not necessary with --restart option in docker run)
docker start mongo-foodmaniac

# Stop mongo on server (not docker):
systemctl disable mongodb.service


docker inspect mongo-foodmaniac

# Backup data:
docker stop mongo-foodmaniac
docker run \
        --rm \
        --mount type=volume,source=food,target=/data/db \
        --mount type=bind,source=/tmp,target=/tmphost \
        busybox tar cvf /tmphost/backupDb.tar /data/db
docker start mongo-foodmaniac
ls -al /tmp






----------  Backup volume  ---------- 
cd /var/lib/docker/volumes
tar cvzf food_docker_volume_backup.tar.gz food


FTP (for backup):
https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-16-04




https://rapidgator.net/file/50c523a2aee88ed44289eefe4d9725d0/Ass_Worship_-_Lick_My_Holes_Clean_-_GoddessClaudia.rar.html
https://rapidgator.net/file/50b22ae4b2eb53755783b4eb84e5d2b7/FIRST_DP_-_Octavia_May.rar.html
https://rapidgator.net/file/81ee30f0ef33dd432cad325a81e7c574/EroticaX_18_06_13_Sheena_Ryder_A_Little_Bit_More_Love_XXX_1080p_MP4_KTR.rar.html
